{"version":3,"file":"background.js","mappings":"AAIA","sources":["webpack://tab-saver-extension/./src/background/background.js"],"sourcesContent":["\r\n\r\n\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.action === \"sendToContent\") {\r\n    \r\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n      if (tabs.length === 0) return;\r\n      chrome.tabs.sendMessage(tabs[0].id, { action: \"processMessage\", data: message.data }, (response) => {\r\n        sendResponse(response);\r\n      });\r\n    });\r\n    return true; // Required for asynchronous response\r\n  }\r\n});\r\n\r\n\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === 'setToken') {\r\n    //console.log('Token received and stored in background.');\r\n    \r\n    // Store token in local storage\r\n    chrome.storage.local.set({ 'autotoken69': request.token69 }, () => {\r\n      //console.log('Token saved in storage.');\r\n    });\r\n\r\n    // Send token to content script\r\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n      if (tabs.length === 0) return;\r\n      chrome.tabs.sendMessage(tabs[0].id, { \r\n        action: \"setautotoken69\", \r\n        token69: request.token69 \r\n      });\r\n    });\r\n\r\n    return true; // Ensures sendResponse works asynchronously\r\n  }\r\n\r\n  if (request.action === 'removeToken') {\r\n    chrome.storage.local.remove(['autotoken69'], () => {\r\n      //console.log('authToken removed from local storage');\r\n      sendResponse({ success: true });\r\n    });\r\n\r\n    return true; // Ensures sendResponse works asynchronously\r\n  }\r\n});\r\n\r\n\r\n\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === \"givetoken\") {\r\n    chrome.storage.local.get('autotoken69', (result) => {\r\n      if(!result.autotoken69){\r\n        sendResponse({ success: false, error: \"No token found.\" });\r\n        return;\r\n      }\r\n      \r\n      chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n        if (tabs.length === 0) {\r\n          sendResponse({ success: false, error: \"No active tab found.\" });\r\n          return;\r\n        }\r\n\r\n        // Send message to content script\r\n        chrome.tabs.sendMessage(tabs[0].id, { action: \"setautotoken69\", token69: result.autotoken69 }, (response) => {\r\n          sendResponse(response || { success: true });\r\n        });\r\n\r\n      });\r\n\r\n    });\r\n\r\n    return true; // Keep the messaging channel open for async response\r\n  }\r\n});\r\n\r\n\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.action === \"getTabInfo\") {\r\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n      if (tabs.length === 0) return;\r\n      const tab = tabs[0];\r\n      sendResponse({\r\n        url: tab.url,\r\n        title: tab.title,\r\n        favicon: tab.favIconUrl\r\n      });\r\n    });\r\n    return true; // Required for async response\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nchrome.runtime.onStartup.addListener(() => {\r\n  //console.log(\"Browser just started!\");\r\n\r\n  chrome.storage.local.get(null, (items) => {\r\n    if (chrome.runtime.lastError) {\r\n      //console.error(\"Error retrieving storage:\", chrome.runtime.lastError);\r\n      return;\r\n    }\r\n\r\n    //console.log(\"Stored data before cleanup:\", items);\r\n\r\n    // Filter out `autotoken69`, deleting everything else\r\n    const keysToDelete = Object.keys(items).filter((key) => key !== \"autotoken69\");\r\n\r\n    if (keysToDelete.length > 0) {\r\n      chrome.storage.local.remove(keysToDelete, () => {\r\n        if (chrome.runtime.lastError) {\r\n          //console.error(\"Error deleting storage items:\", chrome.runtime.lastError);\r\n        } else {\r\n          //console.log(\"Deleted all except 'autotoken69'.\");\r\n          chrome.storage.local.get([\"autotoken69\"], (tokenResult) => {\r\n                const token = tokenResult.autotoken69;\r\n                if (!token) {\r\n                  //console.log(\"No token found.\");\r\n                  return;\r\n                }\r\n          \r\n                //console.log(\"Token retrieved:\", token);\r\n          \r\n                // Send request to backend\r\n                fetch(\"https://autonotebackend.shadowbites10.workers.dev/getallurl\", {\r\n                  method: \"POST\",\r\n                  headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                  },\r\n                  body: JSON.stringify(4), // ✅ Fix: Removed extra stringify\r\n                })\r\n                  .then((response) => response.json())\r\n                  .then((data) => {\r\n                    //console.log(\"Received response from backend:\", data); // ✅ Debugging\r\n                    if (data.success) {\r\n                      const keystoadd = data.res.file;\r\n                      \r\n                      keystoadd.forEach(item => {\r\n                        if(item.url!=null){\r\n                          chrome.storage.local.set({ [item.url.url]: item.url.file_id }, () => {\r\n                            if (chrome.runtime.lastError) {\r\n                              //console.error(`Error saving ${item.key}:`, chrome.runtime.lastError);\r\n                            } else {\r\n                              //console.log(`Saved: ${item.key} -> ${item.value}`);\r\n                            }\r\n                          });\r\n                        }\r\n                      });\r\n                    } else {\r\n                      //console.error(\"Backend returned failure:\", data);\r\n                    }\r\n                  })\r\n                  .catch((error) => {\r\n                    //console.error(\"Error updating default state:\", error);\r\n                  });\r\n              });\r\n        }\r\n      });\r\n    } else {\r\n      //console.log(\"Nothing to delete. Only 'autotoken69' exists.\");\r\n    }\r\n  });\r\n});\r\n"],"names":[],"sourceRoot":""}