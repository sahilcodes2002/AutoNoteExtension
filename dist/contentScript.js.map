{"version":3,"file":"contentScript.js","mappings":";;;AAOA;;AAEA;AACA;AACA;AAEA;;;;;;AAOA;AACA;;AAEA;AAUA;;;;;;;;;;;;;;;AAiBA;;;;;;;AAOA;AACA;;AAEA;AAGA;;;;;;;AAOA;AACA;;AAEA;AAGA;;;;;;;;AAQA;AACA;;AAEA;AACA;AAGA;;;AAGA;;;;;;;AAOA;AAGA;;AAEA;;;;;;;AASA;;;;;;;;AAUA;;AA48CA;AACA;;;;;;;;;;;;;;;;;;;AA8CA;;AAvBA;AACA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AAWA;;;;;;;;;AAWA;;;;;;;;;AAWA;;;;;;AAOA;;;;;;AAQA;;;AAKA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;ACzvDA","sources":["webpack://tab-saver-extension/./src/contentScript/FloatingIcon.js","webpack://tab-saver-extension/./src/contentScript/contentScript.jsx"],"sourcesContent":["import { stringify } from \"postcss\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FloatingIconWrapper = styled.div`\r\n  position: fixed;\r\n  z-index: 1000;\r\n  width: ${({ x }) => (x >= window.innerWidth - 40 ? \"40px\" : \"37px\")};\r\n  height: 37px;\r\n  background-color: ${({ isDragging }) => (isDragging ? \"#FFFFFF\" : \"#FFFFFF\")};\r\n  border-radius: ${({ x }) => (x >= window.innerWidth - 40 ? \"0%\" : \"50%\")};\r\n  border-top-left-radius: ${({ x }) =>\r\n    x >= window.innerWidth - 40 ? \"45%\" : \"50%\"};\r\n  border-bottom-left-radius: ${({ x }) =>\r\n    x >= window.innerWidth - 40 ? \"45%\" : \"50%\"};\r\n  cursor: grab;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  top: ${({ y }) => y}px;\r\n  left: ${({ x }) => x}px;\r\n  transition: background-color 0.3s;\r\n  visibility: ${({ hide }) => (hide ? \"hidden\" : \"visible\")};\r\n`;\r\n\r\n// const FloatingIconButton = styled.button`\r\n//   background: none;\r\n//   border: none;\r\n//   color: white;\r\n//   font-weight: bold;\r\n// `;\r\n// background-color: ${({ isDragging }) => (isDragging ? '#FF7F50' : '#FFD700')};\r\nconst FloatingIconButton = styled.button`\r\n  background: none;\r\n  border-radius: 50%;\r\n  border: none;\r\n  color: white;\r\n  font-weight: bold;\r\n  padding: 0; /* Remove padding */\r\n  margin: 0; /* Remove margin */\r\n  display: inline-flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  justify-content: center;\r\n  &:hover {\r\n    color: black; /* Change text color to green on hover */\r\n  }\r\n`;\r\n\r\nconst OptionsWrapper3 = styled.div`\r\n  position: fixed;\r\n  z-index: 999;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  top: ${({ y }) => y - 22}px; /* Adjust position to be below the main icon */\r\n  left: ${({ x }) => x + 6}px;\r\n  transition: opacity 0.3s;\r\n  visibility: ${({ hide }) => (hide ? \"hidden\" : \"visible\")};\r\n`;\r\n\r\nconst OptionsWrapper2 = styled.div`\r\n  position: fixed;\r\n  z-index: 999;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  top: ${({ y }) => y - 7}px; /* Adjust position to be below the main icon */\r\n  left: ${({ x }) => x - 4}px;\r\n  transition: opacity 0.3s;\r\n  visibility: ${({ hide }) => (hide ? \"hidden\" : \"visible\")};\r\n`;\r\n\r\nconst OptionsWrapper = styled.div`\r\n  position: fixed;\r\n  z-index: 999;\r\n  display: flex;\r\n  flex-direction: column;\r\n  cursor: pointer;\r\n  align-items: center;\r\n  gap: 10px;\r\n  top: ${({ y }) => y + 45}px; /* Adjust position to be below the main icon */\r\n  left: ${({ x }) => x + 4}px;\r\n  transition: opacity 0.3s;\r\n  opacity: ${({ show }) => (show === \"true\" ? 1 : 0)};\r\n  visibility: ${({ hide }) => (hide ? \"hidden\" : \"visible\")};\r\n`;\r\n\r\nconst OptionIcon = styled.div`\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: ${({ isDragging }) => (isDragging ? \"#FFFFFF\" : \"#FFFFFF\")};\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  cursor: pointer;\r\n  visibility: ${({ hide }) => (hide ? \"hidden\" : \"visible\")};\r\n`;\r\n\r\nconst OptionIcon2 = styled.div`\r\n  padding: 1px; /* Remove padding */\r\n  background-color: ${({ isDragging }) => (isDragging ? \"#FFFFFF\" : \"#FFFFFF\")};\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  color: black;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst OptionIcon3 = styled.div`\r\n  padding: 1px; /* Remove padding */\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  color: black;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default function FloatingIcon({\r\n  selectedTexts,\r\n  record,\r\n  setRecord,\r\n  setSelectedTexts,\r\n}) {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [showOptions, setShowOptions] = useState(false);\r\n  const [regetfiles, setRegetfiles] = useState(false);\r\n  const [hide, sethide] = useState(true);\r\n  const [shownotes, setShownotes] = useState(false);\r\n  const [allfiles, setAllfiles] = useState([]);\r\n\r\n  const [showallfile, setshowallfiles] = useState(false);\r\n  const [autotoken69, setautotoken69] = useState(\"\");\r\n  const [file, setfile] = useState(0);\r\n  const [filetitle, setfiletitle] = useState(null);\r\n  const [bakchodiover, setbakchodiover] = useState(false);\r\n  const [position, setPosition] = useState({\r\n    x: window.innerWidth - 40,\r\n    y: 100,\r\n  });\r\n\r\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    if (message.action === \"processMessage\") {\r\n      //console.log(message.data.isChecked);\r\n      sethide(message.data.isChecked);\r\n      sendResponse({ status: \"Message received!\", receivedData: message.data });\r\n    }\r\n  });\r\n\r\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    if (message.action === \"setautotoken69\") {\r\n      //console.log(\"Message received in content script:\");\r\n      //console.log(message.token69); // Correct way to access the token\r\n\r\n      if (message.token69) {\r\n        setautotoken69(message.token69);\r\n      }\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    //console.log(file);\r\n  }, [file]);\r\n\r\n  useEffect(() => {\r\n    chrome.storage.local.get([\"autotoken69\"], (tokenResult) => {\r\n      const token = tokenResult.autotoken69;\r\n      if (!token) {\r\n        //console.log(\"No token found.\");\r\n        return;\r\n      }\r\n\r\n      //console.log(\"Token retrieved:\", token);\r\n\r\n      // Send request to backend\r\n      fetch(\"https://autonotebackend.shadowbites10.workers.dev/getalwayson\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(4), // ✅ Fix: Removed extra stringify\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          //console.log(\"Received response from backend:\", data); // ✅ Debugging\r\n          if (data.success) {\r\n            sethide(!data.res.alwayson);\r\n            //console.log(\"Default state updated:\", data.res.alwayson);\r\n          } else {\r\n            //console.error(\"Backend returned failure:\", data);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          //console.error(\"Error updating default state:\", error);\r\n        });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (file !== 0 && selectedTexts != [] && bakchodiover) {\r\n      //console.log(file);\r\n\r\n      chrome.storage.local.get([\"autotoken69\"], (tokenResult) => {\r\n        const token = tokenResult.autotoken69;\r\n        if (!token) {\r\n          //console.log(\"No token found.\");\r\n          return;\r\n        }\r\n\r\n        //console.log(\"Token retrieved:\", token);\r\n\r\n        fetch(\"https://autonotebackend.shadowbites10.workers.dev/addcontent\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            content: JSON.stringify(selectedTexts),\r\n            id: file,\r\n          }),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            if (data.success) {\r\n              //console.log(\"File updated:\", data.res.id);\r\n            } else {\r\n              //console.error(\"Backend returned failure:\", data);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            //console.error(\"Error storing tabs in the backend:\", error);\r\n          });\r\n      });\r\n    }\r\n  }, [selectedTexts]); // ✅ Now properly re-runs when `file` or `selectedTexts` change\r\n\r\n  useEffect(() => {\r\n    if (autotoken69 === \"\") {\r\n      //console.log(\"asking for token\");\r\n      chrome.runtime.sendMessage({\r\n        action: \"givetoken\",\r\n        data: \"Hello from content script!\",\r\n      });\r\n    } else {\r\n      //console.log(\"Token already exists :\" + autotoken69);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (record) {\r\n      chrome.storage.local.get([\"autotoken69\"], (tokenResult) => {\r\n        const token = tokenResult.autotoken69;\r\n        if (!token) {\r\n          //console.log(\"No token found.\");\r\n          return;\r\n        }\r\n\r\n        //console.log(\"Token retrieved:\", token);\r\n\r\n        // Send request to backend\r\n        fetch(\"https://autonotebackend.shadowbites10.workers.dev/getallfiles\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(4), // ✅ Fix: Removed extra stringify\r\n        })\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            //console.log(\"Received response from backend:\", data); // ✅ Debugging\r\n            if (data.success) {\r\n              setAllfiles(data.res);\r\n              //console.log(\"Default state updated:\", data.res.alwayson);\r\n            } else {\r\n              //console.error(\"Backend returned failure:\", data);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            // //console.error(\"Error updating default state:\", error);\r\n          });\r\n      });\r\n    }\r\n  }, [record, regetfiles]);\r\n\r\n  useEffect(() => {\r\n    if (record) {\r\n      // Request tab information from the background script\r\n      chrome.runtime.sendMessage({ action: \"getTabInfo\" }, (response) => {\r\n        if (!response) return;\r\n\r\n        const url = response.url;\r\n        const title = response.title;\r\n        const favicon = response.favicon;\r\n\r\n        // //console.log(\"Tab URL:\", url);\r\n        // //console.log(\"Tab Title:\", title);\r\n        // //console.log(\"Tab Favicon:\", favicon);\r\n\r\n        if (!url) return; // If URL is empty, exit early\r\n\r\n        // Retrieve the saved token\r\n        chrome.storage.local.get([\"autotoken69\"], (tokenResult) => {\r\n          const token = tokenResult.autotoken69;\r\n          if (!token) {\r\n            // //console.log(\"No token found.\");\r\n            return;\r\n          }\r\n\r\n          // //console.log(\"Token retrieved:\", token);\r\n\r\n          // Check if the URL is already stored\r\n          chrome.storage.local.get([url], (storedResult) => {\r\n            if (storedResult[url]) {\r\n              setfile(JSON.parse(storedResult[url]));\r\n\r\n              // //console.log(\r\n              //   \"file id is already there for this\" +\r\n              //     JSON.parse(storedResult[url])\r\n              // );\r\n              setbakchodiover(false);\r\n              fetch(\r\n                \"https://autonotebackend.shadowbites10.workers.dev/getfiletitle\",\r\n                {\r\n                  method: \"POST\",\r\n                  headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                  },\r\n                  body: JSON.stringify({ id: JSON.parse(storedResult[url]) }),\r\n                }\r\n              )\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                  if (data.success) {\r\n                    // //console.log(data);\r\n                    setfiletitle(data.res.title);\r\n                    setSelectedTexts(JSON.parse(data.res.content));\r\n                    setbakchodiover(true);\r\n                    //console.log(\"File title:\", data.res.title);\r\n                  } else {\r\n                    fetch(\r\n                      \"https://autonotebackend.shadowbites10.workers.dev/newfile\",\r\n                      {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                          Authorization: `Bearer ${token}`,\r\n                          \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({\r\n                          title: title,\r\n                          tab: url,\r\n                          faviconicon: favicon,\r\n                        }),\r\n                      }\r\n                    )\r\n                      .then((response) => response.json())\r\n                      .then((data) => {\r\n                        if (data.success) {\r\n                          setfile(data.res.id);\r\n                          setfiletitle(data.res.title);\r\n                          setbakchodiover(true);\r\n                          chrome.storage.local.set(\r\n                            { [url]: JSON.stringify(data.res.id) },\r\n                            () => {\r\n                              // //console.log(\"Tab data stored.\");\r\n                            }\r\n                          );\r\n                          if (\r\n                            file !== 0 &&\r\n                            selectedTexts != [] &&\r\n                            bakchodiover\r\n                          ) {\r\n                            // //console.log(file);\r\n                          }\r\n                          fetch(\r\n                            \"https://autonotebackend.shadowbites10.workers.dev/upserturl\",\r\n                            {\r\n                              method: \"POST\",\r\n                              headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                                \"Content-Type\": \"application/json\",\r\n                              },\r\n                              body: JSON.stringify({\r\n                                url: url,\r\n                                file: data.res.id,\r\n                              }),\r\n                            }\r\n                          )\r\n                            .then((response) => response.json())\r\n                            .then((data) => {\r\n                              if (data.success) {\r\n                              }\r\n                            })\r\n                            .catch((error) => {\r\n                              //console.error(\r\n                              //   \"Error storing tabs in the backend:\",\r\n                              //   error\r\n                              // );\r\n                            });\r\n                        }\r\n                      })\r\n                      .catch((error) => {\r\n                        //console.error(\r\n                        //   \"Error storing tabs in the backend:\",\r\n                        //   error\r\n                        // );\r\n                      });\r\n                  }\r\n                })\r\n                .catch((error) => {\r\n                  //console.error(\"Error storing tabs in the backend:\", error);\r\n                });\r\n\r\n              // fetch(\"https://autonotebackend.shadowbites10.workers.dev/getfilecontent\", {\r\n              //   method: \"POST\",\r\n              //   headers: {\r\n              //     Authorization: `Bearer ${token}`,\r\n              //     \"Content-Type\": \"application/json\",\r\n              //   },\r\n              //   body: JSON.stringify({ id: JSON.parse(storedResult[url]) }),\r\n              // })\r\n              //   .then((response) => response.json())\r\n              //   .then((data) => {\r\n              //     if (data.success) {\r\n              //       setSelectedTexts(JSON.parse(data.res.content));\r\n              //       setbakchodiover(true);\r\n                    // //console.log(\r\n              //         \"File contnent from BACKEND:\",\r\n              //         data.res.content\r\n              //       );\r\n              //     }\r\n              //   })\r\n              //   .catch((error) => {\r\n                  // //console.error(\"Error storing tabs in the backend:\", error);\r\n              //   });\r\n            } else {\r\n              // Fetch from backend\r\n              var fileurlfound = false;\r\n              setbakchodiover(false);\r\n              fetch(\r\n                \"https://autonotebackend.shadowbites10.workers.dev/geturl\",\r\n                {\r\n                  method: \"POST\",\r\n                  headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                  },\r\n                  body: JSON.stringify({\r\n                    url: url,\r\n                  }),\r\n                }\r\n              )\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                  if (data.success) {\r\n                    fileurlfound = true;\r\n                    setfile(data.res.id);\r\n                    chrome.storage.local.set(\r\n                      { [url]: JSON.stringify(data.res.file_id) },\r\n                      () => {\r\n                        //console.log(\"Tab data stored.\");\r\n                      }\r\n                    );\r\n                    fetch(\r\n                      \"https://autonotebackend.shadowbites10.workers.dev/getfiletitle\",\r\n                      {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                          Authorization: `Bearer ${token}`,\r\n                          \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({ id: data.res.file_id }),\r\n                      }\r\n                    )\r\n                      .then((response) => response.json())\r\n                      .then((data) => {\r\n                        if (data.success) {\r\n                          //console.log(data);\r\n                          setfiletitle(data.res.title);\r\n                          setSelectedTexts(JSON.parse(data.res.content));\r\n                          setbakchodiover(true);\r\n\r\n                          //console.log(\"File title:\", data.res.title);\r\n                        } else {\r\n                          fetch(\r\n                            \"https://autonotebackend.shadowbites10.workers.dev/newfile\",\r\n                            {\r\n                              method: \"POST\",\r\n                              headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                                \"Content-Type\": \"application/json\",\r\n                              },\r\n                              body: JSON.stringify({\r\n                                title: title,\r\n                                tab: url,\r\n                                faviconicon: favicon,\r\n                              }),\r\n                            }\r\n                          )\r\n                            .then((response) => response.json())\r\n                            .then((data) => {\r\n                              if (data.success) {\r\n                                setfile(data.res.id);\r\n                                setfiletitle(data.res.title);\r\n                                setbakchodiover(true);\r\n                                chrome.storage.local.set(\r\n                                  { [url]: JSON.stringify(data.res.id) },\r\n                                  () => {\r\n                                    //console.log(\"Tab data stored.\");\r\n                                  }\r\n                                );\r\n                                if (\r\n                                  file !== 0 &&\r\n                                  selectedTexts != [] &&\r\n                                  bakchodiover\r\n                                ) {\r\n                                  //console.log(file);\r\n\r\n                                  // Fetch the token first\r\n                                  // chrome.storage.local.get(\r\n                                  //   [\"autotoken69\"],\r\n                                  //   (tokenResult) => {\r\n                                  //     const token = tokenResult.autotoken69;\r\n                                  //     if (!token) {\r\n                                        // //console.log(\"No token found.\");\r\n                                  //       return;\r\n                                  //     }\r\n\r\n                                      // //console.log(\"Token retrieved:\", token);\r\n\r\n                                  // Send content to the backend\r\n                                  // fetch(\"https://autonotebackend.shadowbites10.workers.dev/addcontent\", {\r\n                                  //   method: \"POST\",\r\n                                  //   headers: {\r\n                                  //     Authorization: `Bearer ${token}`,\r\n                                  //     \"Content-Type\": \"application/json\",\r\n                                  //   },\r\n                                  //   body: JSON.stringify({\r\n                                  //     content: JSON.stringify(selectedTexts),\r\n                                  //     id: data.res.id,\r\n                                  //   }),\r\n                                  // })\r\n                                  //   .then((response) => response.json())\r\n                                  //   .then((data) => {\r\n                                  //     if (data.success) {\r\n                                        //console.log(\"File updated:\", data.res.content);\r\n                                  //     } else {\r\n                                        // //console.error(\"Backend returned failure:\", data);\r\n                                  //     }\r\n                                  //   })\r\n                                  //   .catch((error) => {\r\n                                      // //console.error(\"Error storing tabs in the backend:\", error);\r\n                                  //   });\r\n                                  //   }\r\n                                  // );\r\n                                }\r\n                                fetch(\r\n                                  \"https://autonotebackend.shadowbites10.workers.dev/upserturl\",\r\n                                  {\r\n                                    method: \"POST\",\r\n                                    headers: {\r\n                                      Authorization: `Bearer ${token}`,\r\n                                      \"Content-Type\": \"application/json\",\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                      url: url,\r\n                                      file: data.res.id,\r\n                                    }),\r\n                                  }\r\n                                )\r\n                                  .then((response) => response.json())\r\n                                  .then((data) => {\r\n                                    if (data.success) {\r\n                                    }\r\n                                  })\r\n                                  .catch((error) => {\r\n                                    //console.error(\r\n                                    //   \"Error storing tabs in the backend:\",\r\n                                    //   error\r\n                                    // );\r\n                                  });\r\n                              }\r\n                            })\r\n                            .catch((error) => {\r\n                              //console.error(\r\n                              //   \"Error storing tabs in the backend:\",\r\n                              //   error\r\n                              // );\r\n                            });\r\n                        }\r\n                      })\r\n                      .catch((error) => {\r\n                        //console.error(\r\n                        //   \"Error storing tabs in the backend:\",\r\n                        //   error\r\n                        // );\r\n                      });\r\n                  } else {\r\n                    fetch(\r\n                      \"https://autonotebackend.shadowbites10.workers.dev/newfile\",\r\n                      {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                          Authorization: `Bearer ${token}`,\r\n                          \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({\r\n                          title: title,\r\n                          tab: url,\r\n                          faviconicon: favicon,\r\n                        }),\r\n                      }\r\n                    )\r\n                      .then((response) => response.json())\r\n                      .then((data) => {\r\n                        if (data.success) {\r\n                          setfile(data.res.id);\r\n                          setfiletitle(data.res.title);\r\n                          setbakchodiover(true);\r\n                          chrome.storage.local.set(\r\n                            { [url]: JSON.stringify(data.res.id) },\r\n                            () => {\r\n                              //console.log(\"Tab data stored.\");\r\n                            }\r\n                          );\r\n                          if (\r\n                            file !== 0 &&\r\n                            selectedTexts != [] &&\r\n                            bakchodiover\r\n                          ) {\r\n                            //console.log(file);\r\n\r\n                            // Fetch the token first\r\n                            // chrome.storage.local.get(\r\n                            //   [\"autotoken69\"],\r\n                            //   (tokenResult) => {\r\n                            //     const token = tokenResult.autotoken69;\r\n                            //     if (!token) {\r\n                                  // //console.log(\"No token found.\");\r\n                            //       return;\r\n                            //     }\r\n\r\n                                // //console.log(\"Token retrieved:\", token);\r\n\r\n                            // Send content to the backend\r\n                            // fetch(\"https://autonotebackend.shadowbites10.workers.dev/addcontent\", {\r\n                            //   method: \"POST\",\r\n                            //   headers: {\r\n                            //     Authorization: `Bearer ${token}`,\r\n                            //     \"Content-Type\": \"application/json\",\r\n                            //   },\r\n                            //   body: JSON.stringify({\r\n                            //     content: JSON.stringify(selectedTexts),\r\n                            //     id: data.res.id,\r\n                            //   }),\r\n                            // })\r\n                            //   .then((response) => response.json())\r\n                            //   .then((data) => {\r\n                            //     if (data.success) {\r\n                                  //console.log(\"File updated:\", data.res.content);\r\n                            //     } else {\r\n                                  // //console.error(\"Backend returned failure:\", data);\r\n                            //     }\r\n                            //   })\r\n                            //   .catch((error) => {\r\n                                // //console.error(\"Error storing tabs in the backend:\", error);\r\n                            //   });\r\n                            //   }\r\n                            // );\r\n                          }\r\n                          fetch(\r\n                            \"https://autonotebackend.shadowbites10.workers.dev/upserturl\",\r\n                            {\r\n                              method: \"POST\",\r\n                              headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                                \"Content-Type\": \"application/json\",\r\n                              },\r\n                              body: JSON.stringify({\r\n                                url: url,\r\n                                file: data.res.id,\r\n                              }),\r\n                            }\r\n                          )\r\n                            .then((response) => response.json())\r\n                            .then((data) => {\r\n                              if (data.success) {\r\n                              }\r\n                            })\r\n                            .catch((error) => {\r\n                              //console.error(\r\n                              //   \"Error storing tabs in the backend:\",\r\n                              //   error\r\n                              // );\r\n                            });\r\n                        }\r\n                      })\r\n                      .catch((error) => {\r\n                        //console.error(\r\n                        //   \"Error storing tabs in the backend:\",\r\n                        //   error\r\n                        // );\r\n                      });\r\n                  }\r\n                })\r\n                .catch((error) => {\r\n                  //console.error(\"Error storing tabs in the backend:\", error);\r\n                });\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [record]);\r\n\r\n  const dragStartRef = useRef({ x: 0, y: 0 });\r\n  const mouseStartRef = useRef({ x: 0, y: 0 });\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDragging) return;\r\n    setPosition((prev) => ({\r\n      x: dragStartRef.current.x + (e.clientX - mouseStartRef.current.x),\r\n      y: dragStartRef.current.y + (e.clientY - mouseStartRef.current.y),\r\n    }));\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDragging) {\r\n      window.addEventListener(\"mousemove\", handleMouseMove);\r\n      window.addEventListener(\"mouseup\", handleMouseUp);\r\n    } else {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, [isDragging]);\r\n  useEffect(() => {\r\n    //console.log(isDragging);\r\n  }, [isDragging]);\r\n\r\n  const handleMouseDown = (e) => {\r\n    setIsDragging(true);\r\n    dragStartRef.current = { x: position.x, y: position.y };\r\n    mouseStartRef.current = { x: e.clientX, y: e.clientY };\r\n    e.preventDefault();\r\n  };\r\n\r\n  const toggleOptions = () => {\r\n    setShowOptions((prev) => !prev);\r\n  };\r\n\r\n  const toggleHide = () => {\r\n    sethide((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <OptionsWrapper2\r\n        x={position.x}\r\n        y={position.y}\r\n        show={showOptions.toString()}\r\n        hide={hide}\r\n      >\r\n        <OptionIcon2 title=\"Hide\" isDragging={isDragging} hide={hide}>\r\n          <FloatingIconButton\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              if (!isDragging) {\r\n                toggleHide();\r\n                setShowOptions(false);\r\n              }\r\n            }}\r\n            title=\"Hide\"\r\n          >\r\n            {/* ⟲ */}\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"10\"\r\n              height=\"10\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                fill=\"grey\"\r\n                d=\"M5.293 5.293a1 1 0 0 1 1.414 0L12 10.586l5.293-5.293a1 1 0 1 1 1.414 1.414L13.414 12l5.293 5.293a1 1 0 0 1-1.414 1.414L12 13.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L10.586 12L5.293 6.707a1 1 0 0 1 0-1.414z\"\r\n              />\r\n            </svg>\r\n          </FloatingIconButton>\r\n        </OptionIcon2>\r\n      </OptionsWrapper2>\r\n      {record && (\r\n        <OptionsWrapper3\r\n          x={position.x}\r\n          y={position.y}\r\n          show={showOptions.toString()}\r\n          hide={hide}\r\n        >\r\n          <OptionIcon3\r\n            title=\"AutoNote note active\"\r\n            isDragging={isDragging}\r\n            hide={hide}\r\n          >\r\n            <FloatingIconButton>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <circle cx=\"12\" cy=\"12\" r=\"0\" fill=\"red\">\r\n                  <animate\r\n                    attributeName=\"r\"\r\n                    begin=\".67\"\r\n                    calcMode=\"spline\"\r\n                    dur=\"1.5s\"\r\n                    keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\"\r\n                    repeatCount=\"indefinite\"\r\n                    values=\"0;2;0;0\"\r\n                  />\r\n                </circle>\r\n                <circle cx=\"12\" cy=\"12\" r=\"0\" fill=\"yellow\">\r\n                  <animate\r\n                    attributeName=\"r\"\r\n                    begin=\"0\"\r\n                    calcMode=\"spline\"\r\n                    dur=\"1.5s\"\r\n                    keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\"\r\n                    repeatCount=\"indefinite\"\r\n                    values=\"0;2;0;0\"\r\n                  />\r\n                </circle>\r\n              </svg>\r\n            </FloatingIconButton>\r\n          </OptionIcon3>\r\n        </OptionsWrapper3>\r\n      )}\r\n      <FloatingIconWrapper\r\n        onMouseDown={handleMouseDown}\r\n        x={position.x}\r\n        y={position.y}\r\n        isDragging={isDragging}\r\n        hide={hide}\r\n      >\r\n        {shownotes && (\r\n          <NotesDisplay\r\n            selectedTexts={selectedTexts}\r\n            position={position}\r\n            setselectdtexts={setSelectedTexts}\r\n            record={record}\r\n          />\r\n        )}\r\n        {showallfile && (\r\n          <FilesDisplay\r\n            file={file}\r\n            allfiles={allfiles}\r\n            position={position}\r\n            setAllfiles={setAllfiles}\r\n            setfile={setfile}\r\n            setfiletitle={setfiletitle}\r\n            setbakchodiover={setbakchodiover}\r\n            setSelectedTexts={setSelectedTexts}\r\n            selectedTexts={selectedTexts}\r\n            filetitle={filetitle}\r\n            record={record}\r\n            setRegetfiles={setRegetfiles}\r\n          />\r\n        )}\r\n        <FloatingIconButton\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            if (!isDragging) {\r\n              toggleOptions();\r\n            }\r\n          }}\r\n          title=\"Show options\"\r\n        >\r\n          {/* ⟲ */}\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              fill=\"blue\"\r\n              d=\"M4.088 6.412a2.837 2.837 0 0 0-1.347-.955l-1.378-.448a.544.544 0 0 1 0-1.025l1.378-.448A2.838 2.838 0 0 0 4.5 1.774l.011-.034L4.96.363a.544.544 0 0 1 1.027 0l.447 1.377a2.836 2.836 0 0 0 1.798 1.796l1.378.448l.028.007a.544.544 0 0 1 0 1.025l-1.378.448A2.839 2.839 0 0 0 6.461 7.26l-.448 1.377A.547.547 0 0 1 5.5 9a.544.544 0 0 1-.513-.363L4.539 7.26a2.835 2.835 0 0 0-.45-.848Zm7.695 3.801l-.765-.248a1.577 1.577 0 0 1-1-.999l-.248-.764a.302.302 0 0 0-.57 0l-.25.764a1.575 1.575 0 0 1-.983.999l-.765.248a.302.302 0 0 0 0 .57l.765.249a1.577 1.577 0 0 1 1 1.002l.248.764a.302.302 0 0 0 .57 0l.249-.764a1.576 1.576 0 0 1 .999-.999l.765-.248a.302.302 0 0 0 0-.57l-.015-.004Zm.347-.944c.254.091.475.259.63.48l-.04.05a1.29 1.29 0 0 1 0 1.5a1.29 1.29 0 0 1-.65.49l-.76.24a.682.682 0 0 0-.23.14a.742.742 0 0 0-.14.22l-.25.79a1.31 1.31 0 0 1-.48.63a1.29 1.29 0 0 1-1.5 0a1.35 1.35 0 0 1-.49-.65l-.24-.76a.59.59 0 0 0-.14-.23a.741.741 0 0 0-.22-.14l-.539-.17l-3.14 3.14a3.105 3.105 0 0 0-.825 1.477L2.02 21.077a.75.75 0 0 0 .904.903l4.601-1.095a3.106 3.106 0 0 0 1.477-.826L19 10.06a1.75 1.75 0 0 1-.005 2.47l-1.783 1.784a.75.75 0 0 0 1.06 1.06l1.784-1.783A3.25 3.25 0 0 0 20.06 9l.891-.892a3.578 3.578 0 0 0-5.06-5.06l-5.068 5.067l.176.534a.55.55 0 0 0 .11.22a.5.5 0 0 0 .22.13l.73.27h.07Z\"\r\n            />\r\n          </svg>\r\n        </FloatingIconButton>\r\n        <OptionsWrapper\r\n          x={position.x}\r\n          y={position.y}\r\n          show={showOptions.toString()}\r\n          hide={hide}\r\n        >\r\n          <OptionIcon isDragging={isDragging} hide={hide}>\r\n            <FloatingIconButton\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n\r\n                setRecord((prevRecord) => !prevRecord);\r\n                //toggleOptions();\r\n              }}\r\n              title={!record ? \"Start Auto Note\" : \"Stop auto note\"}\r\n            >\r\n              {/* ⟲ */}\r\n              {!record && (\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"20\"\r\n                  height=\"20\"\r\n                  viewBox=\"0 0 20 20\"\r\n                >\r\n                  <path\r\n                    fill=\"blue\"\r\n                    d=\"M15.544 9.59a1 1 0 0 1-.053 1.728L6.476 16.2A1 1 0 0 1 5 15.321V4.804a1 1 0 0 1 1.53-.848l9.014 5.634Z\"\r\n                  />\r\n                </svg>\r\n              )}\r\n              {record && (\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"20\"\r\n                  height=\"20\"\r\n                  viewBox=\"0 0 20 20\"\r\n                >\r\n                  <path\r\n                    fill=\"blue\"\r\n                    fill-rule=\"evenodd\"\r\n                    d=\"M6.75 3a2 2 0 0 0-2 2v10a2 2 0 1 0 4 0V5a2 2 0 0 0-2-2Zm6.5 0a2 2 0 0 0-2 2v10a2 2 0 1 0 4 0V5a2 2 0 0 0-2-2Z\"\r\n                    clip-rule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n              )}\r\n            </FloatingIconButton>\r\n          </OptionIcon>\r\n          <OptionIcon isDragging={isDragging} hide={hide}>\r\n            <FloatingIconButton\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                if (!isDragging) {\r\n                }\r\n                if (!shownotes) {\r\n                  setshowallfiles(false);\r\n                }\r\n                setShownotes((x) => !x);\r\n\r\n                //console.log(\"x\" + shownotes);\r\n              }}\r\n              title=\"toggle notes\"\r\n            >\r\n              {!shownotes && (\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"15\"\r\n                  height=\"15\"\r\n                  viewBox=\"0 0 17 16\"\r\n                >\r\n                  <path\r\n                    fill=\"blue\"\r\n                    fill-rule=\"evenodd\"\r\n                    d=\"M14.938 0H3a2 2 0 0 0-2 2v2h16l-.062-2a2 2 0 0 0-2-2zM1 8h4v2H1zm0 3h4v2H1zm4 5v-2H1c.066 1.045.927 2 1.987 2H5zM1 5h4v2H1zm5 0v2h11l-.062-2H6zm0 6v2h11l-.062-2H6zm8.938 5C16 16 16.935 15.045 17 14H6v2h8.938zM6 8v2h11l-.062-2H6z\"\r\n                  />\r\n                </svg>\r\n              )}\r\n              {shownotes && (\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"15\"\r\n                  height=\"15\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"blue\"\r\n                    stroke=\"blue\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    stroke-width=\"2\"\r\n                    d=\"M3 3h3M3 21h3m0 0h4a2 2 0 0 0 2-2V9M6 21V9m0-6h4a2 2 0 0 1 2 2v4M6 3v6M3 9h3m0 0h6m-9 6h9m3-6l3 3m0 0l3 3m-3-3l3-3m-3 3l-3 3\"\r\n                  />\r\n                </svg>\r\n              )}\r\n            </FloatingIconButton>\r\n          </OptionIcon>\r\n          <OptionIcon isDragging={isDragging} hide={hide}>\r\n            <FloatingIconButton\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                if (!isDragging) {\r\n                }\r\n                if (!showallfile) {\r\n                  setShownotes(false);\r\n                }\r\n                setshowallfiles((x) => !x);\r\n              }}\r\n              title=\"toggle notes\"\r\n            >\r\n              {!showallfile && (\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"15\"\r\n                  height=\"15\"\r\n                  viewBox=\"0 0 512 512\"\r\n                >\r\n                  <path\r\n                    fill=\"blue\"\r\n                    d=\"M186.2 139.6h139.6V0H186.2v139.6zM372.4 0v139.6H512V0H372.4zM0 139.6h139.6V0H0v139.6zm186.2 186.2h139.6V186.2H186.2v139.6zm186.2 0H512V186.2H372.4v139.6zM0 325.8h139.6V186.2H0v139.6zM186.2 512h139.6V372.4H186.2V512zm186.2 0H512V372.4H372.4V512zM0 512h139.6V372.4H0V512z\"\r\n                  />\r\n                </svg>\r\n              )}\r\n              {showallfile && (\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"15\"\r\n                  height=\"15\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"blue\"\r\n                    d=\"M3 6h10v2H3V6m0 10h10v2H3v-2m0-5h12v2H3v-2m13-4l-1.42 1.39L18.14 12l-3.56 3.61L16 17l5-5l-5-5Z\"\r\n                  />\r\n                </svg>\r\n              )}\r\n            </FloatingIconButton>\r\n          </OptionIcon>\r\n        </OptionsWrapper>\r\n      </FloatingIconWrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction NotesDisplay({ selectedTexts, position, setselectdtexts, record }) {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => setWindowWidth(window.innerWidth);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const side = position.x > windowWidth / 2 ? \"left\" : \"right\";\r\n  const offset = side === \"left\" ? -230 : 50; // Adjusted the offset to place the notes beside the icon\r\n\r\n  return (\r\n    <NotesContainer y={position.y} x={position.x + offset}>\r\n      {/* {selectedTexts.map((text, index) => (\r\n        <Note key={index}>{text}</Note>\r\n      ))} */}\r\n      {!record && (\r\n        <Notewarning>\r\n          {\"Click on play button to start auto note and see old notes !\"}\r\n        </Notewarning>\r\n      )}\r\n      {record && selectedTexts && selectedTexts.length == 0 && (\r\n        <Notewarning>{\"Start selecting text to create notes\"}</Notewarning>\r\n      )}\r\n      {selectedTexts\r\n        .slice()\r\n        .reverse()\r\n        .map((text, index) => (\r\n          <Note key={index}>\r\n            <Combine\r\n              onClick={() => {\r\n                // setRegetfiles(x=!x);\r\n                setselectdtexts((prev) => prev.filter((item) => item !== text));\r\n              }}\r\n            >\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"11\"\r\n                height=\"11\"\r\n                viewBox=\"0 0 16 16\"\r\n              >\r\n                <path\r\n                  fill=\"currentColor\"\r\n                  fill-rule=\"evenodd\"\r\n                  d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\"\r\n                  clip-rule=\"evenodd\"\r\n                />\r\n                <path\r\n                  fill=\"currentColor\"\r\n                  d=\"M11.854 4.854a.5.5 0 0 0-.707-.707L8 7.293L4.854 4.147a.5.5 0 1 0-.707.707L7.293 8l-3.146 3.146a.5.5 0 0 0 .707.708L8 8.707l3.147 3.147a.5.5 0 0 0 .707-.708L8.708 8z\"\r\n                />\r\n              </svg>\r\n            </Combine>\r\n            {text}\r\n          </Note>\r\n        ))}\r\n    </NotesContainer>\r\n  );\r\n}\r\n\r\nfunction FilesDisplay({\r\n  allfiles,\r\n  position,\r\n  setAllfiles,\r\n  setfile,\r\n  setfiletitle,\r\n  filetitle,\r\n  setbakchodiover,\r\n  setSelectedTexts,\r\n  selectedTexts,\r\n  record,\r\n  setRegetfiles,\r\n  file,\r\n}) {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  const [filetodel, setFiletodelete] = useState(null);\r\n  const [isDeleting, setisDeleting] = useState(false);\r\n  useEffect(() => {\r\n    const handleResize = () => setWindowWidth(window.innerWidth);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const side = position.x > windowWidth / 2 ? \"left\" : \"right\";\r\n  const offset = side === \"left\" ? -230 : 50; // Adjusted the offset to place the notes beside the icon\r\n\r\n  return (\r\n    <NotesContainer y={position.y} x={position.x + offset}>\r\n      {/* {selectedTexts.map((text, index) => (\r\n        <Note key={index}>{text}</Note>\r\n      ))} */}\r\n      {record && (\r\n        <Heading>\r\n          <Subheading title=\"You are adding notes to this file.\">\r\n            {\"Current file: \"}\r\n          </Subheading>\r\n          {filetitle ? filetitle : \"\"}\r\n          {filetitle && selectedTexts.length == 0 ? \" (new file)\" : \"\"}\r\n        </Heading>\r\n      )}\r\n\r\n      {record && (\r\n        <Subheading>\r\n          Switch files from below{\" \"}\r\n          {selectedTexts && selectedTexts.length != 0 ? (\r\n            <>\r\n              {\" \"}\r\n              {\" or create a\"}{\" \"}\r\n              {selectedTexts && selectedTexts.length != 0 && (\r\n                <MyButton\r\n                  title=\"Create a new file!\"\r\n                  onClick={() => {\r\n                    chrome.runtime.sendMessage(\r\n                      { action: \"getTabInfo\" },\r\n                      (response) => {\r\n                        if (!response) return;\r\n\r\n                        const url = response.url;\r\n                        const title = response.title;\r\n                        const favicon = response.favicon;\r\n\r\n                        //console.log(\"Tab URL:\", url);\r\n                        //console.log(\"Tab Title:\", title);\r\n                        //console.log(\"Tab Favicon:\", favicon);\r\n\r\n                        if (!url) return; // If URL is empty, exit early\r\n\r\n                        chrome.storage.local.get(\r\n                          [\"autotoken69\"],\r\n                          (tokenResult) => {\r\n                            const token = tokenResult.autotoken69;\r\n                            if (!token) {\r\n                              //console.log(\"No token found.\");\r\n                              return;\r\n                            }\r\n\r\n                            fetch(\r\n                              \"https://autonotebackend.shadowbites10.workers.dev/newfile\",\r\n                              {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                  Authorization: `Bearer ${token}`,\r\n                                  \"Content-Type\": \"application/json\",\r\n                                },\r\n                                body: JSON.stringify({\r\n                                  title: title,\r\n                                  tab: url,\r\n                                  faviconicon: favicon,\r\n                                }),\r\n                              }\r\n                            )\r\n                              .then((response) => response.json())\r\n                              .then((data) => {\r\n                                if (data.success) {\r\n                                  setfile(data.res.id);\r\n                                  setfiletitle(title);\r\n                                  setbakchodiover(true);\r\n                                  setSelectedTexts([]);\r\n                                  chrome.storage.local.remove([url]);\r\n                                  chrome.storage.local.set(\r\n                                    { [url]: JSON.stringify(data.res.id) },\r\n                                    () => {\r\n                                      //console.log(\"Tab data stored.\");\r\n                                    }\r\n                                  );\r\n                                  //setRegetfiles((x) => !x);\r\n                                  setAllfiles((filee) => [\r\n                                    ...filee,\r\n                                    { id: data.res.id, title: data.res.title },\r\n                                  ]);\r\n                                  fetch(\r\n                                    \"https://autonotebackend.shadowbites10.workers.dev/upserturl\",\r\n                                    {\r\n                                      method: \"POST\",\r\n                                      headers: {\r\n                                        Authorization: `Bearer ${token}`,\r\n                                        \"Content-Type\": \"application/json\",\r\n                                      },\r\n                                      body: JSON.stringify({\r\n                                        url: url,\r\n                                        file: data.res.id,\r\n                                      }),\r\n                                    }\r\n                                  )\r\n                                    .then((response) => response.json())\r\n                                    .then((data) => {\r\n                                      if (data.success) {\r\n                                      }\r\n                                    })\r\n                                    .catch((error) => {\r\n                                      //console.error(\r\n                                      //   \"Error storing tabs in the backend:\",\r\n                                      //   error\r\n                                      // );\r\n                                    });\r\n                                }\r\n                              })\r\n                              .catch((error) => {\r\n                                //console.error(\r\n                                //   \"Error storing tabs in the backend:\",\r\n                                //   error\r\n                                // );\r\n                              });\r\n                          }\r\n                        );\r\n                      }\r\n                    );\r\n                  }}\r\n                >\r\n                  New File\r\n                </MyButton>\r\n              )}\r\n              {\"    \"}\r\n              {\r\n                <Combine\r\n                  title=\"Refresh!\"\r\n                  onClick={() => {\r\n                    setRegetfiles((x) => !x);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"11\"\r\n                    height=\"11\"\r\n                    viewBox=\"0 0 21 21\"\r\n                  >\r\n                    <g\r\n                      fill=\"white\"\r\n                      fill-rule=\"evenodd\"\r\n                      stroke=\"currentColor\"\r\n                      stroke-linecap=\"round\"\r\n                      stroke-linejoin=\"round\"\r\n                    >\r\n                      <path d=\"M6.5 3.5c-2.412 1.378-4 4.024-4 7a8 8 0 0 0 8 8m4-1c2.287-1.408 4-4.118 4-7a8 8 0 0 0-8-8\" />\r\n                      <path d=\"M6.5 7.5v-4h-4m12 10v4h4\" />\r\n                    </g>\r\n                  </svg>{\" \"}\r\n                </Combine>\r\n              }\r\n            </>\r\n          ) : (\r\n            <>\r\n              {\":  \"}\r\n              {\r\n                <Combine\r\n                  title=\"Refresh!\"\r\n                  onClick={() => {\r\n                    setRegetfiles((x) => !x);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"11\"\r\n                    height=\"11\"\r\n                    viewBox=\"0 0 21 21\"\r\n                  >\r\n                    <g\r\n                      fill=\"white\"\r\n                      fill-rule=\"evenodd\"\r\n                      stroke=\"currentColor\"\r\n                      stroke-linecap=\"round\"\r\n                      stroke-linejoin=\"round\"\r\n                    >\r\n                      <path d=\"M6.5 3.5c-2.412 1.378-4 4.024-4 7a8 8 0 0 0 8 8m4-1c2.287-1.408 4-4.118 4-7a8 8 0 0 0-8-8\" />\r\n                      <path d=\"M6.5 7.5v-4h-4m12 10v4h4\" />\r\n                    </g>\r\n                  </svg>{\" \"}\r\n                </Combine>\r\n              }\r\n            </>\r\n          )}\r\n        </Subheading>\r\n      )}\r\n\r\n      {record && allfiles && allfiles.length == 0 && (\r\n        <Notewarning>{\"You have no old files!\"}</Notewarning>\r\n      )}\r\n      {!record && <Notewarning>{\"start recording to see files!!\"}</Notewarning>}\r\n\r\n      {allfiles.map((x, index) => (\r\n        <StyledDiv key={index}>\r\n          {filetodel != x.id && (\r\n            <Notea\r\n              onClick={() => {\r\n                if (x.id != file) {\r\n                  if (selectedTexts.length == 0) {\r\n                    chrome.runtime.sendMessage(\r\n                      { action: \"getTabInfo\" },\r\n                      (response) => {\r\n                        if (!response) return;\r\n\r\n                        const url = response.url;\r\n                        const title = response.title;\r\n                        const favicon = response.favicon;\r\n\r\n                        //console.log(\"Tab URL:\", url);\r\n                        //console.log(\"Tab Title:\", title);\r\n                        //console.log(\"Tab Favicon:\", favicon);\r\n\r\n                        if (filetitle == title) {\r\n                          setisDeleting(true);\r\n                          chrome.storage.local.get(\r\n                            [\"autotoken69\"],\r\n                            (tokenResult) => {\r\n                              const token = tokenResult.autotoken69;\r\n                              if (!token) {\r\n                                //console.log(\"No token found.\");\r\n                                return;\r\n                              }\r\n                              fetch(\r\n                                \"https://autonotebackend.shadowbites10.workers.dev/deletefile\",\r\n                                {\r\n                                  method: \"POST\",\r\n                                  headers: {\r\n                                    Authorization: `Bearer ${token}`,\r\n                                    \"Content-Type\": \"application/json\",\r\n                                  },\r\n                                  body: JSON.stringify({\r\n                                    id: file,\r\n                                  }),\r\n                                }\r\n                              )\r\n                                .then((response) => response.json())\r\n                                .then((data) => {\r\n                                  setisDeleting(false);\r\n                                  if (data.success) {\r\n                                    setAllfiles((prevFiles) =>\r\n                                      prevFiles.filter((f) => f.id !== file)\r\n                                    );\r\n                                    setfile(x.id);\r\n                                    setfiletitle(x.title);\r\n\r\n                                    setFiletodelete(null);\r\n                                  }\r\n                                })\r\n                                .catch((error) => {\r\n                                  setfile(x.id);\r\n                                  setfiletitle(x.title);\r\n                                  setisDeleting(false);\r\n                                  //console.error(\r\n                                  //   \"Error storing tabs in the backend:\",\r\n                                  //   error\r\n                                  // );\r\n                                });\r\n                            }\r\n                          );\r\n                        } else {\r\n                          setfile(x.id);\r\n                          setfiletitle(x.title);\r\n                        }\r\n                      }\r\n                    );\r\n                  } else {\r\n                    setfile(x.id);\r\n                    setfiletitle(x.title);\r\n                  }\r\n\r\n                  chrome.storage.local.get([\"autotoken69\"], (tokenResult) => {\r\n                    const token = tokenResult.autotoken69;\r\n                    if (!token) {\r\n                      //console.log(\"No token found.\");\r\n                      return;\r\n                    }\r\n                    //console.log(\"getting content of \" + x.id);\r\n                    fetch(\r\n                      \"https://autonotebackend.shadowbites10.workers.dev/getfiletitle\",\r\n                      {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                          Authorization: `Bearer ${token}`,\r\n                          \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({ id: x.id }),\r\n                      }\r\n                    )\r\n                      .then((response) => response.json())\r\n                      .then((data) => {\r\n                        if (data.success) {\r\n                          setSelectedTexts(JSON.parse(data.res.content));\r\n                          setbakchodiover(true);\r\n                          //console.log(\"File title:\", data.res.title);\r\n                        }\r\n                      })\r\n                      .catch((error) => {\r\n                        //console.error(\r\n                        //   \"Error storing tabs in the backend:\",\r\n                        //   error\r\n                        // );\r\n                      });\r\n                  });\r\n                  //setSelectedTexts(JSON.parse(x.content));\r\n                  chrome.runtime.sendMessage(\r\n                    { action: \"getTabInfo\" },\r\n                    (response) => {\r\n                      if (!response) return;\r\n\r\n                      const url = response.url;\r\n                      chrome.storage.local.set(\r\n                        { [url]: JSON.stringify(x.id) },\r\n                        () => {\r\n                          //console.log(\"Tab data stored.\");\r\n                        }\r\n                      );\r\n                      chrome.storage.local.get(\r\n                        [\"autotoken69\"],\r\n                        (tokenResult) => {\r\n                          const token = tokenResult.autotoken69;\r\n                          if (!token) {\r\n                            //console.log(\"No token found.\");\r\n                            return;\r\n                          }\r\n                          fetch(\r\n                            \"https://autonotebackend.shadowbites10.workers.dev/upserturl\",\r\n                            {\r\n                              method: \"POST\",\r\n                              headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                                \"Content-Type\": \"application/json\",\r\n                              },\r\n                              body: JSON.stringify({\r\n                                url: url,\r\n                                file: x.id,\r\n                              }),\r\n                            }\r\n                          )\r\n                            .then((response) => response.json())\r\n                            .then((data) => {\r\n                              if (data.success) {\r\n                              }\r\n                            })\r\n                            .catch((error) => {\r\n                              //console.error(\r\n                              //   \"Error storing tabs in the backend:\",\r\n                              //   error\r\n                              // );\r\n                            });\r\n                        }\r\n                      );\r\n                    }\r\n                  );\r\n                }\r\n              }}\r\n              key={index}\r\n            >\r\n              {x.id != file && (\r\n                <Combine\r\n                  onClick={(e) => {\r\n                    if (!isDeleting) {\r\n                      e.stopPropagation();\r\n                      setFiletodelete(x.id);\r\n                    }\r\n                  }}\r\n                  title={`delete ${x.title}`}\r\n                >\r\n                  {x.id !== file ? (\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"11\"\r\n                      height=\"11\"\r\n                      viewBox=\"0 0 32 32\"\r\n                    >\r\n                      <path\r\n                        fill=\"currentColor\"\r\n                        d=\"M14 12.5a.5.5 0 0 0-1 0v11a.5.5 0 0 0 1 0zm4.5-.5a.5.5 0 0 1 .5.5v11a.5.5 0 0 1-1 0v-11a.5.5 0 0 1 .5-.5m2-5.5V7h8a.5.5 0 0 1 0 1h-2.543l-1.628 17.907A4.5 4.5 0 0 1 19.847 30h-7.694a4.5 4.5 0 0 1-4.482-4.093L6.043 8H3.5a.5.5 0 0 1 0-1h8v-.5a4.5 4.5 0 1 1 9 0m-8 0V7h7v-.5a3.5 3.5 0 1 0-7 0M7.048 8l1.62 17.817A3.5 3.5 0 0 0 12.152 29h7.694a3.5 3.5 0 0 0 3.486-3.183L24.953 8z\"\r\n                      />\r\n                    </svg>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {/* <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"11\"\r\n                height=\"11\"\r\n                viewBox=\"0 0 304 384\"\r\n              >\r\n                <path\r\n                  fill=\"currentColor\"\r\n                  d=\"M21 341V85h256v256q0 18-12.5 30.5T235 384H64q-18 0-30.5-12.5T21 341zM299 21v43H0V21h75L96 0h107l21 21h75z\"\r\n                />\r\n              </svg> */}\r\n                </Combine>\r\n              )}\r\n              {x.id == file ? <Mytextgreen>{\">> (current) \"}</Mytextgreen> : \"\"}\r\n              {x.title}\r\n            </Notea>\r\n          )}\r\n\r\n          {filetodel == x.id ? (\r\n            <Noteaa>\r\n              Delete : {x.title}{\" \"}\r\n              <Combine\r\n                onClick={() => {\r\n                  setisDeleting(true);\r\n                  chrome.storage.local.get([\"autotoken69\"], (tokenResult) => {\r\n                    const token = tokenResult.autotoken69;\r\n                    if (!token) {\r\n                      //console.log(\"No token found.\");\r\n                      return;\r\n                    }\r\n                    fetch(\r\n                      \"https://autonotebackend.shadowbites10.workers.dev/deletefile\",\r\n                      {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                          Authorization: `Bearer ${token}`,\r\n                          \"Content-Type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify({\r\n                          id: x.id,\r\n                        }),\r\n                      }\r\n                    )\r\n                      .then((response) => response.json())\r\n                      .then((data) => {\r\n                        setisDeleting(false);\r\n                        if (data.success) {\r\n                          setAllfiles((prevFiles) =>\r\n                            prevFiles.filter((file) => file.id !== x.id)\r\n                          );\r\n                          setFiletodelete(null);\r\n                        }\r\n                      })\r\n                      .catch((error) => {\r\n                        setisDeleting(false);\r\n                        //console.error(\r\n                        //   \"Error storing tabs in the backend:\",\r\n                        //   error\r\n                        // );\r\n                      });\r\n                  });\r\n                }}\r\n              >\r\n                <Mytextyes>{\"  Yes\"}</Mytextyes>\r\n              </Combine>\r\n              {\"  /  \"}\r\n              <Combine\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  setFiletodelete(null);\r\n                }}\r\n              >\r\n                <Mytextno>No</Mytextno>\r\n              </Combine>\r\n            </Noteaa>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </StyledDiv>\r\n      ))}\r\n    </NotesContainer>\r\n  );\r\n}\r\n\r\nconst StyledDiv = styled.div``;\r\n\r\nconst NotesContainer = styled.div`\r\n  position: fixed;\r\n  top: ${({ y }) => y}px;\r\n  left: ${({ x }) => x}px;\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 10px;\r\n  z-index: 1000;\r\n  max-width: 200px;\r\n  width: 200px; /* Fixed width */\r\n  height: 300px; /* Fixed height */\r\n  overflow-y: scroll; /* Enable vertical scrolling */\r\n\r\n  /* Hide scrollbar */\r\n  -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n  scrollbar-width: none; /* Firefox */\r\n\r\n  /* Hide scrollbar for Chrome, Safari and Opera */\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst NotesContainerright = styled.div`\r\n  position: fixed;\r\n  top: ${({ y }) => y}px;\r\n  left: ${({ x }) => x}px;\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 10px;\r\n  z-index: 1000;\r\n  max-width: 200px;\r\n  width: 200px; /* Fixed width */\r\n  height: 300px; /* Fixed height */\r\n  overflow-y: scroll; /* Enable vertical scrolling */\r\n  text-align: right; /* Right-align text */\r\n\r\n  /* Hide scrollbar */\r\n  -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n  scrollbar-width: none; /* Firefox */\r\n\r\n  /* Hide scrollbar for Chrome, Safari and Opera */\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst Notewarning = styled.div`\r\n  font-size: 10px;\r\n  margin: 5px 0;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ccc;\r\n  color: #8b0000; /* Adding text color as deep red */\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst Heading = styled.div`\r\n  font-size: 11px;\r\n  margin: 5px 0;\r\n  border-bottom: 1px solid #ccc;\r\n  color: #004d00; /* Darker green color */\r\n  font-weight: 600; /* Slightly bolder font */\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst Subheading = styled.div`\r\n  display: inline; /* Make it inline */\r\n  font-size: 10px;\r\n  margin: 5px 0;\r\n  border-bottom: 1px solid #ccc;\r\n  color: #0000ff; /* Changed text color to blue */\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst Mytextno = styled.div`\r\n  color: #ff0000; /* Red color */\r\n  &:hover {\r\n    color: #006400; /* Green color */\r\n    font-size: 12px; /* Increases text size on hover */\r\n  }\r\n`;\r\nconst Mytextyes = styled.div`\r\n  color: #0000ff; /* Blue color */\r\n  &:hover {\r\n    color: #006400; /* Green color */\r\n    font-size: 12px; /* Increases text size on hover */\r\n  }\r\n`;\r\n\r\nconst Mytextgreen = styled.div`\r\n  color: #daa520; /* Green color */\r\n  display: inline-block; /* Ensures it behaves like an inline element with control over dimensions */\r\n`;\r\n\r\nconst Combine = styled.div`\r\n  display: inline-block;\r\n  margin-right: 3px;\r\n  cursor: pointer;\r\n  &:hover svg {\r\n    color: red;\r\n  }\r\n`;\r\n\r\nconst Note = styled.div`\r\n  font-size: 10px;\r\n  white-space: pre-wrap;\r\n  margin: 5px 0;\r\n  padding: 5px;\r\n  color: black;\r\n  border-bottom: 1px solid #ccc;\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n\r\n  button {\r\n    color: #8b0000; /* Deep red */\r\n    font-size: 12px; /* Really small */\r\n    background: transparent; /* No background */\r\n    border: none; /* No boundaries */\r\n    padding: 0;\r\n    margin-right: 5px; /* Optional spacing */\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Notea = styled.div`\r\n  font-size: 10px;\r\n  white-space: pre-wrap;\r\n  margin: 5px 0;\r\n  padding: 5px;\r\n  color: black;\r\n  border-bottom: 1px solid #ccc;\r\n  background-color: #f9f9f9; /* Light background for contrast */\r\n  transition: background-color 0.2s ease-in-out;\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #e0e0e0; /* Slightly darker on hover */\r\n    cursor: pointer; /* Make it feel clickable */\r\n  }\r\n\r\n  button {\r\n    color: #8b0000; /* Deep red */\r\n    font-size: 12px; /* Small text */\r\n    background: transparent;\r\n    border: none;\r\n    padding: 0;\r\n    margin-right: 5px;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Noteaa = styled.div`\r\n  font-size: 10px;\r\n  white-space: pre-wrap;\r\n  margin: 5px 0;\r\n  padding: 5px;\r\n  color: black;\r\n  border-bottom: 1px solid #ccc;\r\n  background-color: #f9f9f9; /* Light background for contrast */\r\n  transition: background-color 0.2s ease-in-out;\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #e0e0e0; /* Slightly darker on hover */\r\n  }\r\n`;\r\n\r\nconst MyButton = styled.button`\r\n  font-size: 9px; /* Small button */\r\n  background-color: #28a745; /* Green color */\r\n  color: white; /* White text */\r\n  border: none;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n    background-color: #218838; /* Darker green on hover */\r\n  }\r\n`;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport FloatingIcon from \"./FloatingIcon\";\r\n\r\nconst style = document.createElement(\"style\");\r\nstyle.textContent = `\r\n  pre, code {\r\n    white-space: pre-wrap !important;\r\n  }\r\n`;\r\ndocument.head.appendChild(style);\r\n\r\nfunction MainComponent() {\r\n  const [record, setRecord] = useState(false);\r\n  const [selectedTexts, setSelectedTexts] = useState([]);\r\n  const selectedTextsRef = useRef(selectedTexts);\r\n  const selectionTimeoutRef = useRef(null);\r\n  const originalClipboard = useRef(\"\");\r\n  const [clipboardStatus, setClipboardStatus] = useState(\"unknown\");\r\n\r\n  // Sync ref with state\r\n  useEffect(() => {\r\n    selectedTextsRef.current = selectedTexts;\r\n  }, [selectedTexts]);\r\n\r\n  // Check clipboard permissions\r\n  useEffect(() => {\r\n    const checkPermissions = async () => {\r\n      try {\r\n        const status = await navigator.permissions.query({ name: \"clipboard-read\" });\r\n        setClipboardStatus(status.state);\r\n      } catch (error) {\r\n        setClipboardStatus(\"denied\");\r\n      }\r\n    };\r\n  \r\n    document.addEventListener(\"focus\", checkPermissions); // Re-check permissions when tab is focused\r\n    checkPermissions();\r\n  \r\n    return () => {\r\n      document.removeEventListener(\"focus\", checkPermissions);\r\n    };\r\n  }, []);\r\n  \r\n\r\n  // async function handleClipboardCopy() {\r\n  //   const errorMessages = [];\r\n  //   try {\r\n  //     const selection = window.getSelection();\r\n      \r\n  //     // Modern clipboard API attempt\r\n  //     try {\r\n  //       await navigator.clipboard.writeText(selection.toString());\r\n  //     } catch (writeError) {\r\n  //       errorMessages.push(`Write failed: ${writeError.message}`);\r\n  //       throw writeError;\r\n  //     }\r\n\r\n  //     const copiedText = await navigator.clipboard.readText();\r\n  //     originalClipboard.current = copiedText;\r\n\r\n  //     return { text: copiedText, method: \"clipboard\" };\r\n  //   } catch (error) {\r\n  //     // DOM fallback\r\n  //     try {\r\n  //       const selection = window.getSelection();\r\n  //       if (selection.rangeCount === 0) return { text: \"\", method: \"dom\" };\r\n\r\n  //       let domText = \"\";\r\n  //       for (let i = 0; i < selection.rangeCount; i++) {\r\n  //         const range = selection.getRangeAt(i);\r\n  //         const tempDiv = document.createElement(\"div\");\r\n  //         tempDiv.appendChild(range.cloneContents());\r\n          \r\n  //         const isCodeBlock = range.startContainer.parentElement.closest(\"pre, code\");\r\n  //         const hasPreFormatting = window.getComputedStyle(range.startContainer.parentElement).whiteSpace.startsWith(\"pre\");\r\n\r\n  //         domText += (isCodeBlock || hasPreFormatting) \r\n  //           ? tempDiv.textContent + \"\\n\"\r\n  //           : tempDiv.innerText + \"\\n\";\r\n  //       }\r\n\r\n  //       return { text: domText.trim(), method: \"dom\" };\r\n  //     } catch (domError) {\r\n  //       return { text: \"\", method: \"failed\" };\r\n  //     }\r\n  //   } finally {\r\n  //     if (originalClipboard.current) {\r\n  //       try {\r\n  //         await navigator.clipboard.writeText(originalClipboard.current);\r\n  //       } catch (restoreError) {\r\n  //         console.error(\"Failed to restore clipboard:\", restoreError);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // function calculateJaccardSimilarity(text1, text2) {\r\n  //   const set1 = new Set(text1.split(/\\s+/));\r\n  //   const set2 = new Set(text2.split(/\\s+/));\r\n  //   const intersection = new Set([...set1].filter(x => set2.has(x)));\r\n  //   const union = new Set([...set1, ...set2]);\r\n  //   return (intersection.size / union.size) * 100;\r\n  // }\r\n\r\n  // async function sendToBackend(text) {\r\n  //   const newText = text.trim();\r\n  //   if (!newText) return;\r\n\r\n  //   const currentTexts = [...selectedTextsRef.current];\r\n  //   let newSelectedTexts = currentTexts.filter(storedText => {\r\n  //     const similarity = calculateJaccardSimilarity(newText, storedText);\r\n  //     return !(\r\n  //       newText.includes(storedText) ||\r\n  //       storedText.includes(newText) ||\r\n  //       similarity >= 90\r\n  //     );\r\n  //   });\r\n\r\n  //   newSelectedTexts.push(newText);\r\n  //   setSelectedTexts(newSelectedTexts);\r\n  // }\r\n  async function handleClipboardCopy() {\r\n    if (!record) return { text: \"\", method: \"disabled\" }; // Don't interfere when recording is off\r\n  \r\n    const errorMessages = [];\r\n    try {\r\n      const selection = window.getSelection();\r\n      if (!selection.toString()) return { text: \"\", method: \"empty\" };\r\n  \r\n      // Store clipboard only on first copy\r\n      if (!originalClipboard.current) {\r\n        try {\r\n          originalClipboard.current = await navigator.clipboard.readText();\r\n        } catch (error) {\r\n          //console.warn(\"Failed to read clipboard:\", error);\r\n        }\r\n      }\r\n  \r\n      // Modern clipboard API attempt\r\n      try {\r\n        await navigator.clipboard.writeText(selection.toString());\r\n      } catch (writeError) {\r\n        errorMessages.push(`Write failed: ${writeError.message}`);\r\n        throw writeError;\r\n      }\r\n  \r\n      return { text: selection.toString(), method: \"clipboard\" };\r\n    } catch (error) {\r\n      return { text: \"\", method: \"failed\" };\r\n    }\r\n  }\r\n  \r\n\r\n  function calculateJaccardSimilarity(text1, text2) {\r\n    const set1 = new Set(text1.split(/\\s+/));\r\n    const set2 = new Set(text2.split(/\\s+/));\r\n    const intersection = new Set([...set1].filter(x => set2.has(x)));\r\n    const union = new Set([...set1, ...set2]);\r\n    return (intersection.size / union.size) * 100;\r\n  }\r\n  \r\n  async function sendToBackend(text) {\r\n    const newText = text.trim();\r\n  \r\n    // Ignore very short selections (like space, single punctuation, or empty text)\r\n    if (!newText || newText.length <= 2) return; \r\n  \r\n    const currentTexts = [...selectedTextsRef.current];\r\n  \r\n    let newSelectedTexts = currentTexts.filter(storedText => {\r\n      const similarity = calculateJaccardSimilarity(newText, storedText);\r\n  \r\n      // Ignore short selections when comparing\r\n      if (newText.length <= 2) return true; \r\n  \r\n      return !(\r\n        newText.includes(storedText) ||\r\n        storedText.includes(newText) ||\r\n        similarity >= 90\r\n      );\r\n    });\r\n  \r\n    newSelectedTexts.push(newText);\r\n    setSelectedTexts(newSelectedTexts);\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    // async function handleSelectionChange() {\r\n    //   if (selectionTimeoutRef.current) {\r\n    //     clearTimeout(selectionTimeoutRef.current);\r\n    //   }\r\n\r\n    //   selectionTimeoutRef.current = setTimeout(async () => {\r\n    //     if (!record) return;\r\n\r\n    //     try {\r\n    //       const { text } = await handleClipboardCopy();\r\n    //       if (text) await sendToBackend(text);\r\n    //     } catch (error) {\r\n    //       console.error(\"Selection processing error:\", error);\r\n    //     }\r\n    //   }, 350);\r\n    // }\r\n\r\n    async function handleSelectionChange(event) {\r\n      if (!record) return;\r\n    \r\n      // Ignore clipboard handling when user is pasting\r\n      if (event.type === \"keyup\" && (event.ctrlKey || event.metaKey) && event.key === \"v\") {\r\n        return;\r\n      }\r\n    \r\n      if (selectionTimeoutRef.current) {\r\n        clearTimeout(selectionTimeoutRef.current);\r\n      }\r\n    \r\n      selectionTimeoutRef.current = setTimeout(async () => {\r\n        try {\r\n          const { text } = await handleClipboardCopy();\r\n          if (text) await sendToBackend(text);\r\n        } catch (error) {\r\n          //console.error(\"Selection processing error:\", error);\r\n        }\r\n      }, 350);\r\n    }    \r\n    document.addEventListener(\"mouseup\", handleSelectionChange);\r\n    document.addEventListener(\"keyup\", handleSelectionChange);\r\n    document.addEventListener(\"selectionchange\", handleSelectionChange);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mouseup\", handleSelectionChange);\r\n      document.removeEventListener(\"keyup\", handleSelectionChange);\r\n      document.removeEventListener(\"selectionchange\", handleSelectionChange);\r\n      if (selectionTimeoutRef.current) {\r\n        clearTimeout(selectionTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [record]);\r\n\r\n  return (\r\n    <FloatingIcon\r\n      selectedTexts={selectedTexts}\r\n      record={record}\r\n      setRecord={setRecord}\r\n      setSelectedTexts={setSelectedTexts}\r\n    />\r\n  );\r\n}\r\n\r\nfunction init() {\r\n  const container = document.body;\r\n  const floatingIconContainer = document.createElement(\"div\");\r\n  floatingIconContainer.style.position = \"relative\";\r\n  container.appendChild(floatingIconContainer);\r\n  \r\n  const root = createRoot(floatingIconContainer);\r\n  root.render(<MainComponent />);\r\n}\r\n\r\ninit();"],"names":[],"sourceRoot":""}